#version 400 core

layout(triangles, equal_spacing, ccw) in;

in vec<3> tc_pos[];
in vec2 tc_texcoord[];
in vec<3> tc_normal[];
in vec<3> tc_tangent[];

out vec<3> te_pos;
out vec2 te_texcoord;
out vec<3> te_normal;
out vec<3> te_tangent;
out vec<3> te_binormal;

out vec<3> te_patch_distance;

uniform mat4 u_view_matrix;
uniform mat4 u_proj_matrix;
uniform mat3 u_normal_matrix;
uniform mat4 u_world_matrix;

uniform float u_displacement_weight;
uniform sampler2D us_displacement;

#define TRI_LERP(attr) (attr[0] * gl_TessCoord.x + attr[1] * gl_TessCoord.y + attr[2] * gl_TessCoord.z)

void main()
{
    te_patch_distance = gl_TessCoord;
	te_texcoord = TRI_LERP(tc_texcoord);
	te_normal = TRI_LERP(tc_normal);
	te_tangent = TRI_LERP(tc_tangent);
	vec<3> displacement = texture(us_displacement, te_texcoord).x * u_displacement_weight * te_normal;
	te_pos = TRI_LERP(tc_pos) + displacement;
	// te_pos += displacement;
	// te_pos = mix(te_pos, normalize(te_pos), 0.1);

    // te_normal = vec<3>(0.0);
    // te_tangent = vec<3>(0.0);

    // vec<3> adj[2];
    //
    // for (int i = 0; i < 3; ++i)
    // {
    //     vec<3> diff = tc_pos[i] - te_pos;
    //
    //     if (length(diff) > 0.1)
    //     {
    //         adj[i] = normalize(diff);
    //     }
    // }
    //
    // te_normal = normalize(cross(adj[0], ));
    // te_tangent = normalize(cross(te_normal, B));

    te_normal = u_normal_matrix * te_normal;
    te_tangent = u_normal_matrix * te_tangent;
    te_binormal = cross(te_normal, te_tangent);

	vec4 world_space = vec4(te_pos.xyz, 1.0);
	vec4 view_space = u_view_matrix * world_space;
	gl_Position = u_proj_matrix * view_space;
}
